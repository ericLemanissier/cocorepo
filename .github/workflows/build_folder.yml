name: Build all versions of package

on:
  push:
    paths-ignore:
      - 'recipes/**'
  pull_request:
    paths-ignore:
      - 'recipes/**'
  workflow_call:
    inputs:
      package:
        type: string
        required: true
      folder:
        type: string
        required: false
      upload:
        type: boolean
        required: false
        default: false
    secrets:
      FILEN_EMAIL:
        description: 'Email to authenticate with FileN'
        required: true
      FILEN_PASSWORD:
        description: 'Password to authenticate with FileN'
        required: true

  workflow_dispatch:
    inputs:
      package:
        type: string
        required: true
      folder:
        type: string
        required: false
      upload:
        type: boolean
        required: true
        default: false

env:
  PACKAGE: ${{ inputs.package || 'zlib' }}
  UPLOAD: ${{ inputs.upload || 'false' }}

jobs:
  find_versions:
    name: Find Version of ${{ inputs.package || 'zlib' }}
    runs-on: ubuntu-latest
    outputs:
      references: ${{ steps.find_versions.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - run: npm ci
      - uses: actions/github-script@v7
        id: find_versions
        with:
          script: |
            const fs = require('node:fs/promises');
            const yaml = require('js-yaml');

            const package = process.env.PACKAGE
            const upload = process.env.UPLOAD
            const folder = core.getInput('folder')
            
            const fileContent = await fs.readFile(`recipes/${package}/config.yml`, 'utf8');
            const config = yaml.load(fileContent);

            const references = Object.entries(config.versions)
              .filter(([_, info]) => folder === '' || info.folder === folder)
              .map(([version, info]) => ({
                package,
                version,
                upload
              }))

            core.debug(`found references ${references}`)
            return references;

  build_refs:
    needs: find_versions
    if: ${{ needs.find_versions.outputs.references != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.find_versions.outputs.references) }}
    uses: ./.github/workflows/build_single_ref.yml
    with:
      package: ${{ matrix.package }}
      version: ${{ matrix.version }}
      upload: ${{ matrix.upload == 'true'}}
    secrets: inherit

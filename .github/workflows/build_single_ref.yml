name: Build single ref

on:
  push:
    paths-ignore:
      - 'recipes/**'
  pull_request:
    paths-ignore:
      - 'recipes/**'
  workflow_call:
    inputs:
      package:
        type: string
        required: true
      version:
        type: string
        required: true
      upload:
        type: boolean
        required: false
        default: false
    secrets:
      FILEN_EMAIL:
        description: 'Email to authenticate with FileN'
        required: true
      FILEN_PASSWORD:
        description: 'Password to authenticate with FileN'
        required: true

  workflow_dispatch:
    inputs:
      package:
        type: string
        required: true
      version:
        type: string
        required: true
      upload:
        type: boolean
        required: false
        default: false

env:
  PACKAGE: ${{ inputs.package || 'zlib' }}
  VERSION: ${{ inputs.version || '1.3.1' }}
  REF: ${{ inputs.package || 'zlib' }}/${{ inputs.version || '1.3.1' }}

jobs:  
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      folder: ${{ steps.get_folder.outputs.result }}
      matrix: ${{ steps.search_shared_option.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
            requirements.txt
            recipes/${{ env.PACKAGE }}

      - id: get_folder
        uses: mikefarah/yq@v4.45.4
        with:
          cmd: yq '.versions."${{ env.VERSION }}".folder' 'recipes/${{ env.PACKAGE }}/config.yml'

      - uses: ./.github/actions/setup-conan

      - uses: ./.github/actions/setup-remote
        with:
          filen-email: ${{ secrets.FILEN_EMAIL }}
          filen-password: ${{ secrets.FILEN_PASSWORD }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ github.ref == 'refs/heads/community_index' }}

      - uses: actions/github-script@v7
        id: search_shared_option
        with:
          script: |
            const {
              exitCode,
              stdout,
              stderr
            } = await exec.getExecOutput('conan', ['inspect', `recipes/${process.env.PACKAGE}/${{ steps.get_folder.outputs.result }}`, '--format=json']);
            if( exitCode != 0 ) {
              core.setFailed(`Could not parse recipe. error ${exitCode}: ${stderr}`);
              return
            }
            const info = JSON.parse(stdout)
            core.info(JSON.stringify(info))

            return {
              os: ['ubuntu-24.04', 'windows-2025', 'macos-14'],
              shared: ( "shared" in info.options_definitions ) ? ['-o*/*:shared=False', '-o*/*:shared=True'] : [''],
              build_type: ["Release"]
            };

      - if: github.ref == 'refs/heads/community_index'
        run: |
          conan export --version=$VERSION --no-remote recipes/$PACKAGE/${{ steps.get_folder.outputs.result }}
          conan upload -r community $REF --confirm --only-recipe

  build:
    needs: [prepare-matrix]
    env:
      FOLDER: recipes/${{ inputs.package || 'zlib' }}/${{ needs.prepare-matrix.outputs.folder }}
      SHARED: ${{ matrix.shared }}
      BUILD_TYPE: ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
            requirements.txt
            ${{ env.FOLDER }}

      - uses: ./.github/actions/setup-conan
          
      - uses: ./.github/actions/setup-remote
        with:
          filen-email: ${{ secrets.FILEN_EMAIL }}
          filen-password: ${{ secrets.FILEN_PASSWORD }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: conan export --version=$VERSION --no-remote ${{ env.FOLDER }}

      - run: |
          CONAN_PATH=$(conan config home)
          PROFILE_PATH=$(conan profile path default)
          COMPILER=$(awk -F "=" '/^compiler=/ {print $2}' $PROFILE_PATH)
          CPP_STDS=$(python3 -c "import yaml;import sys;print(*yaml.safe_load(sys.stdin)['compiler']['$COMPILER']['cppstd'])" < $CONAN_PATH/settings.yml)
          for cpp_std in $CPP_STDS; do
            if [ "$cpp_std" = "None" ]; then
              ARG=""
            else
              ARG="-s compiler.cppstd=$cpp_std"
            fi
            if ! conan profile show $ARG -sbuild_type=$BUILD_TYPE $SHARED -c:a tools.system.package_manager:mode=install -c:a tools.system.package_manager:sudo=True
            then
              continue
            fi
            set +e
            conan install $ARG --require=$REF -sbuild_type=$BUILD_TYPE $SHARED --build=missing --build=$REF --format=json > create.json  -c:a tools.system.package_manager:mode=install -c:a tools.system.package_manager:sudo=True
            code=$?
            set -e
            echo "CODE=$code" >> "$GITHUB_OUTPUT"

            if [ $code -ne 6 ]; then
              if [ "$cpp_std" != "None" ]; then
                echo "compiler.cppstd=$cpp_std" >> $PROFILE_PATH
              fi
              exit "$code"
            fi
          done
              
        id: conan_install
        name: Conan Install

      - run: |
          conan test ${{ env.FOLDER }}/test_package/conanfile.py $REF -sbuild_type=$BUILD_TYPE $SHARED  -c:a tools.system.package_manager:mode=install -c:a tools.system.package_manager:sudo=True
        if: ${{ steps.conan_install.outputs.CODE != 6 }}
      - run: conan upload -r community $REF --confirm
        if: ${{ steps.conan_install.outputs.CODE != 6 && inputs.upload }}

name: Push CI

on:
  push:
    
jobs:
  find_modified_refs:
    runs-on: ubuntu-latest
    outputs:
      references: ${{ steps.find_modified_refs.outputs.references }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - run: npm ci
      - uses: actions/github-script@v7
        id: find_modified_refs
        with:
          script: |
            let before = context.payload.before;
            if (before === "0000000000000000000000000000000000000000")
              before = "HEAD"
            const after = context.payload.after;
            const { data: comparison } = await github.rest.repos.compareCommitsWithBasehead({
              owner: context.issue.owner,
              repo: context.issue.repo,
              basehead: `${before}...${after}`
              });
            core.debug(comparison)
            
            recipes = new Set()
            for (file of comparison.files) {
              filepath = file.filename.split("/")
              if (filepath.length < 4){
                core.debug(`ignore file path too short : ${filepath}`)
                continue
              }
              if (filepath[0] != "recipes") {
                core.debug(`ignore file path not in recipes : ${filepath}`)
                continue
              }
              core.debug(`adding ${filepath[1]}/${filepath[2]}`)
              recipes.add(`${filepath[1]}/${filepath[2]}`)
            }

            
            const fs = require('node:fs/promises');
            const yaml = require('js-yaml');

            references = []
            for(recipe of recipes) {
              [package, folder] = recipe.split("/")
              const fileContent = await fs.readFile(`recipes/${package}/config.yml`, 'utf8');
              const config = yaml.load(fileContent);
              for (const [version, info] of Object.entries(config.versions))
                if(info.folder == folder)
                  references.push({package,version,folder})
            }
            core.debug(`found references ${references}`)
            core.setOutput('references', references);

  build_refs:
    needs: find_modified_refs
    if: ${{ needs.find_modified_refs.outputs.references != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.find_modified_refs.outputs.references) }}
    uses: ./.github/workflows/build_single_ref.yml
    with:
      package: ${{ matrix.package }}
      version: ${{ matrix.version }}
      folder: ${{ matrix.folder }}
      upload: false
    secrets: inherit

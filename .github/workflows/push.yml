name: Push CI

on:
  push:
    
jobs:
  find_modified_refs:
    runs-on: ubuntu-latest
    outputs:
      references: ${{ steps.find_modified_refs.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - run: npm ci
      - uses: actions/github-script@v7
        id: find_modified_refs
        with:
          script: |
            let before = context.payload.before;
            if (before === "0000000000000000000000000000000000000000")
              before = "HEAD";
            const after = context.payload.after;
            const { data: comparison } = await github.rest.repos.compareCommitsWithBasehead({
              owner: context.repo.owner,
              repo: context.repo.repo,
              basehead: `${before}...${after}`
            });
            core.debug(comparison);

            const fs = require('node:fs/promises');
            const yaml = require('js-yaml');
            let references = new Set();
            for (const file of comparison.files) {
              filepath = file.filename.split("/");
              if (filepath.length < 4) {
                core.debug(`ignore file path too short : ${filepath}`);
                continue;
              }
              if (filepath[0] !== "recipes") {
                core.debug(`ignore file path not in recipes : ${filepath}`);
                continue;
              }
              const [, package, folder] = filepath;
              const fileContent = await fs.readFile(`recipes/${package}/config.yml`, 'utf8');
              const config = yaml.load(fileContent);
              core.debug(`file: ${filepath}`);
              const path = filepath.join("/");
              if (path === `recipes/${package}/${folder}/conandata.yml`) {
                core.debug("conandata detected");
                const newconandata = yaml.load(await fs.readFile(path, 'utf8'));
                const response = await fetch(`${{ github.server_url }}/${{ github.event.repository.owner.login }}/${{ github.event.repository.name }}/raw/${before}/${path}`);
                if (response.ok) {
                  core.debug("got old conandata successfully");
                  const oldconandata = yaml.load(await response.text());
                  Object.entries(newconandata.sources)
                    .filter(([version, info]) => 
                      !(version in oldconandata.sources) || 
                      JSON.stringify(info) !== JSON.stringify(oldconandata.sources[version])
                    )
                    .map(([version]) => JSON.stringify({ package, version }))
                    .forEach(ref => references.add(ref));

                  const newPatches = newconandata.patches || {};
                  const oldPatches = oldconandata.patches || {};
                  Object.entries(newPatches)
                    .filter(([version, info]) => 
                      !(version in oldPatches) || 
                      JSON.stringify(info) !== JSON.stringify(oldPatches[version])
                    )
                    .map(([version]) => JSON.stringify({ package, version }))
                    .forEach(ref => references.add(ref));
                  continue;
                } else {
                  core.error(`error getting old conandata: ${response.status} ${response.statusText} ${response.body}`);
                }
              } else if (path.startsWith(`recipes/${package}/${folder}/patches/`)) {
                const patchName = filepath.slice(3).join("/")
                core.debug(`patch detected: ${patchName}`)
                const newconandata = yaml.load(await fs.readFile(`recipes/${package}/${folder}/conandata.yml`, 'utf8'))
                const newPatches = newconandata.patches || {};
                Object.entries(newPatches)
                  .filter(([version, patches]) => patches.some((patch) => patch.patch_file === patchName))
                  .map(([version]) => JSON.stringify({ package, version }))
                  .forEach(ref => references.add(ref));
                continue;
              }
              Object.entries(config.versions)
                .filter(([_, info]) => info.folder === folder)
                .map(([version]) => JSON.stringify({ package, version }))
                .forEach(ref => references.add(ref));
            }
            return Array.from(references).map(JSON.parse);

  build_refs:
    needs: find_modified_refs
    if: ${{ needs.find_modified_refs.outputs.references != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.find_modified_refs.outputs.references) }}
    uses: ./.github/workflows/build_single_ref.yml
    with:
      package: ${{ matrix.package }}
      version: ${{ matrix.version }}
      upload: false
    secrets: inherit
